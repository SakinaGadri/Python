help_can_pair|'TCTC', 'AGAG'|"The function gets 2 genes that can pair without being reversed (length is the same)"|True
help_can_pair|'TTCTTC', 'AAGA'|"The function gets 2 genes that can pair without being reversed (length is different)"|True
help_can_pair|'TTC', 'AAGATCGA'|"The function gets 2 genes that can pair without being reversed (length is different)"|True
help_can_pair|'TCAG', 'CTGA'|"The function gets 2 genes that can pair after being reversed (length is the same)"|True
help_can_pair|'TTC', 'CTGAA'|"The function gets 2 genes that can pair after being reversed (length is different)"|True
help_can_pair|'TATACA','TGT'|"The function gets 2 genes that can pair after being reversed (length is different)"|True
help_can_pair|'AGTC', 'GGCACCCC'|'The function gets 2 genes that can not pair (length is different)'|False
help_can_pair|'GGCACCCC', 'AGTC'|'The function gets 2 genes that can not pair (length is different)'|False
pair_genes|'TCTC', 'AGAG'|"The function gets 2 genes that can pair without being reversed (length is the same)"|True
pair_genes|'TTCTTC', 'AAGA'|"The function gets 2 genes that can pair without being reversed (length is different)"|True
pair_genes|'TTC', 'AAGATCGA'|"The function gets 2 genes that can pair without being reversed (length is different)"|True
pair_genes|'TCAG', 'CTGA'|"The function gets 2 genes that can pair after being reversed (length is the same)"|True
pair_genes|'TTC', 'CTGAA'|"The function gets 2 genes that can pair after being reversed (length is different)"|True
pair_genes|'TATACA','TGT'|"The function gets 2 genes that can pair after being reversed (length is different)"|True
pair_gene|'AGTC', 'CTTA'|"The function gets 2 genes that can not pair (length is the same)"|False
pair_gene|'AGTC', 'GGCACCCC'|'The function gets 2 genes that can not pair (length is different)'|False
pair_gene|'GGCACCCC', 'AGTC'|'The function gets 2 genes that can not pair (length is different)'|False
zip_length|''|'the function gets an empty gene'|0
zip_length|'AGTCG'|'the function gets a gene that can zip 0 nucleotides'|0
zip_length|'AGTCGT'|'the function gets a gene that can zip 1 nucleotides'|1
zip_length|'AGTCTCGCT'|'the function gets a gene that can zip 2 nucleotides'|2
zip_length|'AGTCTCACT'|'the function gets a gene that can zip 3 nucleotides'|3
zip_length|'AGTAGCCTTGCGCAAGGCTACT'|'the function gets a gene that can zip 11 nucleotides'|11

help_find_anchor|['A', 'T', 'G', 'C', 'A', 'T', 'A'], 'AT'|'Gene in which anchor can be found without being reversed'|0
help_find_anchor|['G', 'A', 'T', 'C', 'A', 'T', 'A'], 'TA'|'Gene in which anchor can be found with being reversed'|2
help_find_anchor|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C'], 'GG'|'Gene in which anchor does not exist'|-1
help_find_anchor|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C'], ''|'anchor is empty'|-1
help_find_anchor|[], 'AT'|'Gene is empty'|-1
help_splice_gene|['A', 'T', 'G', 'C', 'A', 'T', 'A'], 'AT', 'TA'|'Gene in which the anchor can be found without being reversed'|(0, 5)
help_splice_gene|['T', 'A', 'G', 'C', 'A', 'G', 'A', 'T'], 'AT', 'AG'|'Gene in which the anchor can be found with being reversed'|(0, 5)
help_splice_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C'], 'GG', 'AG'|'Gene in which anchor does not exist'|-1
help_splice_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C'], '', 'AC'|'one of the anchor is empty'|-1
help_splice_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C'], 'AT', ''|'one of the anchor is empty'|-1
help_splice_gene|[], 'AT', 'TA'|'Gene is empty'|-1
setup|source_gene|['A', 'T', 'G', 'C', 'A', 'T', 'A']
setup|destination_gene|['T', 'A', 'A', 'T', 'G', 'C', 'A', 'G', 'T', 'A']
splice_gene|source_gene, destination_gene, 'AT', 'TA'|'when the anchors are found without being reversed'|
source_gene|'A gene that has both anchors without being reversed'|['A']
destination_gene|'A gene that has both anchors without being reversed'|['A', 'T', 'G', 'C', 'A', 'T', 'A', 'T', 'G', 'C', 'A', 'G', 'T', 'A']
setup|source_gene|['A', 'T', 'G', 'C', 'A', 'T', 'C', 'A']
setup|destination_gene|['T', 'A', 'A', 'T', 'G', 'C', 'A', 'G', 'T', 'C']
splice_gene|source_gene, destination_gene, 'CT', 'GT'|'when the anchors are found with being reversed'|
source_gene|'A gene that has both anchors without being reversed'|['A', 'A']
destination_gene|'A gene that has both anchors without being reversed'|['T', 'A', 'A', 'T', 'G', 'C', 'A', 'T', 'C]
setup|source_gene|['A', 'T', 'G', 'C', 'A', 'T', 'C', 'A']
setup|destination_gene|['T', 'A', 'A', 'T', 'G', 'C', 'A', 'C', 'T', 'C']
splice_gene|source_gene, destination_gene, 'TG', 'AC'|'when the anchors are found with only one being reversed'|
source_gene|'A gene that has both anchors with one being reversed'|['A', 'T', 'C', 'A']
destination_gene|'A gene that has both anchors without being reversed'|['T', 'A', 'A', ''T', 'G', 'C', 'A', 'T', 'C]
setup|source_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
setup|destination_gene|['T', 'A', 'A', 'T', 'G', 'C', 'A', 'C', 'T', 'C']
splice_gene|source_gene, destination_gene, 'CT', 'AC'|'when the anchors are found with only one being reversed'|
source_gene|'A gene that has both anchors without being reversed'|['A', 'T', 'G']
destination_gene|'A gene that has both anchors with one being reversed'|['T', 'A', 'C', 'T', 'T', 'A', 'C']
setup|source_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
setup|destination_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
splice_gene|source_gene, destination_gene, 'CT', ''|'when the anchor is empty'|
source_gene|'A gene which does not have the anchor'|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
destination_gene|'A gene which does not have the anchor'|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
setup|source_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
setup|destination_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
splice_gene|source_gene, destination_gene, '', 'CT'|'when the anchor is empty'|
source_gene|'A gene which does not have the anchor'|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
destination_gene|'A gene which does not have the anchor'|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
setup|source_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
setup|destination_gene|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
splice_gene|source_gene, destination_gene, 'GG', 'AG'|'when the anchor is does not exist in both the genes'|
source_gene|'A gene which does not have any of the anchor'|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
destination_gene|'A gene which does not have any of the anchor'|['A', 'T', 'G', 'C', 'T', 'T', 'A', 'C']
setup|source_gene|['A', 'T', 'C', 'T', 'T', 'A', 'C']
setup|destination_gene|['A', 'G', 'C', 'G', 'C']
splice_gene|source_gene, destination_gene, 'AG', 'CG'|'when the anchor is does not exist in one of the genes'|
source_gene|'A gene which does not have any of the anchors'|['A', 'T', 'C', 'T', 'T', 'A', 'C']
destination_gene|'A gene which does has both the anchors'|['A', 'G', 'C', 'G', 'C']
setup|source_gene|[]
setup|destination_gene|[]
splice_gene|source_gene, destination_gene, 'AT', 'TT'|'when the gene is does empty'|
source_gene|'A gene which is empty'|[]
destination_gene|'A gene which is empty'|[]
setup|source_gene|['A', 'T', 'G', 'C', 'A']
setup|destination_gene|[]
splice_gene|source_gene, destination_gene, 'AT', 'CA'|'when the gene is does empty'|
source_gene|'A gene which is empty'|['A', 'T', 'G', 'C', 'A']
destination_gene|'A gene which is empty'|[]
setup|source_gene|[]
setup|destination_gene|['T', 'T', 'A', 'A', 'G']
splice_gene|source_gene, destination_gene, 'TT', 'AG'|'when the gene is does empty'|
source_gene|'A gene which is empty'|[]
destination_gene|'A gene which is empty'|['T', 'T', 'A', 'A', 'G']
help_get_digits|'[A]C', 4|'A mask with no numbers'|1
help_get_digits|'[A]C3', 4|'A mask with only one digit'|3
help_get_digits|'[A]C5623*'|'A mask with many digits'|5623
help_decode_mask|'AAA'|'A simple mask'|['A', 'A', 'A']
help_decode_mask|'[AT]'|'A mask with a multi'|['AT']
help_decode_mask|'A*'|'A mask with a star'|['A', 'ATCG']
help_decode_mask|'[CT]G'|'A mask with a nucleotide'|['CT', 'G']
help_decode_mask|'A3'|'A mask wth numbers'|['A', 'A', 'A']
help_decode_mask|'A3*[GT]3C4'|'A complicated mask with multis, stars, nucleotides and numbers'|['A', 'A', 'A', 'ATCG', 'GT', 'GT', 'GT', 'C', 'C', 'C']
match_mask|'AAACTGGG','AAA'|'A simple mask'|5
match_mask|'AAACTGGG','[AT]'|'A mask with a multi'|0
match_mask|'AAACTGGG','A*'|'A mask with a star'|5
match_mask|'AAACTGGG','[CT]G'|'A mask with a nucleotides'|2
match_mask|'AAACTGGG','A3'|'A mask with numbers'|-1
match_mask|'AAACTGGG','A3*[GT]3C4'|'A complicated mask with multis, stars, nucleotides and numbers'|-1
match_mask|'ACAA', '[A]C3'|'A mask that can't pair with the gene'|-1
match_mask|'TAGTCA', 'CT'|'A mask that can pair with the gene read forward'|1
match_mask|'AAACTGGG', '[AG]'|'A mask that can pair with the gene read backwards'|3